@model IndexViewModel;

<div class="container">
    <div class=" mb-3 mt-3">
        Отправка команды на терминал
    </div>
    
    <div class="form form-disabled">
        <div class="row">
            <div class="col-6">
                <label for="terminalId" class="form-label">ID Терминала(ов)</label>
                <textarea id="terminalId" class="form-control"></textarea>
            </div>
        
            <div class="col-6">
                <label for="command" class="form-label">Комманда</label>
                <select id="command" class="form-select"></select>
            </div>    
        </div>

        <div class="mt-3 parameters-container"></div>
        
        <div class="d-flex mt-5 justify-content-md-center">
            <button id="form-btn" class="btn d-block btn-success">Отправить</button>
        </div>
    </div>
    
    <table class="table mt-5">
        <thead class="table-dark">
        <tr>
            <th>#</th>
            <th>Дата и время</th>
            <th>Комманда</th>
            <th>Параметр 1</th>
            <th>Параметр 2</th>
            <th>Параметр 3</th>
            <th>Статус</th>
        </tr>
        </thead>
        <tbody id="terminal-commands">
        </tbody>
    </table>
    
    <div class="d-flex justify-content-md-center">
        <ul class="pagination"></ul>  
    </div>
    
</div>

<div id="commandTypes" class="d-none">
    @Json.Serialize(Model.CommandTypes)
</div>

<script>
    const commands = JSON.parse(document.getElementById('commandTypes').textContent);
    const defaultCommand = { id: 0, name: 'Не выбрано' };
    const commandsToPopulate = [defaultCommand, ...commands];

    const commandSelectBox = document.getElementById('command');
    const commandParametersForm = document.querySelector('.parameters-container');

    const terminalIdInput = document.getElementById('terminalId');
    const terminalCommandsTableBody = document.getElementById('terminal-commands');

    const formButton = document.getElementById('form-btn');
    
    let paginationSettings = {
        page: 1,
        pageSize: 10,
     } 
    
    populateCommandSelectBox();
    updatedParametersForm();
    fetchTerminalCommands();
    
    terminalIdInput.addEventListener('change', fetchTerminalCommands)
    commandSelectBox.addEventListener('change', updatedParametersForm)
    formButton.addEventListener('click', submitForm);
    
    function populateCommandSelectBox() {
        for (let command of commandsToPopulate) {
            let option = document.createElement('option');
            option.value = command.id;
            option.text = command.name;
            commandSelectBox.appendChild(option);
        }        
    }

    function updatedParametersForm(){
        removeAllChildNodes(commandParametersForm)
        
        if (commandSelectBox.value == defaultCommand.id) {
            return;
        }
        
        const selectedCommand = commands.find(x => x.id == commandSelectBox.value);
        for (let parameter of selectedCommand.parameters) {
            const container = document.createElement('div');
            container.classList = 'mb-3';

            const label = document.createElement('label');
            label.textContent = parameter.name;
            label.classList = 'form-label';

            const input = document.createElement('input');
            input.value = parameter.defaultValue;
            input.classList = 'form-control parameter-input';

            container.appendChild(label);
            container.appendChild(input);
            commandParametersForm.appendChild(container);
        }
    }
        
    async function fetchTerminalCommands() {
        if (isNaN(terminalIdInput.value)) {
            return;
        }
        
        const page = paginationSettings.page;
        const pageSize = paginationSettings.pageSize;
        
        const response = await fetch(`api/terminal/${terminalIdInput.value}/commands?page=${page}&pageSize=${pageSize}`); 
        const pagedList = await response.json();
       
        removeAllChildNodes(terminalCommandsTableBody)
        
        let index = 1;
        for (const command of pagedList.items) {
            const row = createRow(command, index);
            terminalCommandsTableBody.appendChild(row);
            index++;
        }
        
        paginationSettings = {
            page: pagedList.page,
            pageSize: pagedList.pageSize,
            totalItems: pagedList.totalItems,
            totalPages: Math.ceil(pagedList.totalItems / pagedList.pageSize)
        };
        
        updatePagination();
    }
    
    function updatePagination() {
        const pagination = document.querySelector('.pagination');
        removeAllChildNodes(pagination);
        
        for (let i = 1; i <= paginationSettings.totalPages; i++) {
            const item = document.createElement('li');            
            item.classList = i == paginationSettings.page 
                ? 'page-item active' 
                : 'page-item';
            
            const itemLink = document.createElement('a')
            itemLink.classList = 'page-link';
            itemLink.textContent = i;
            
            item.appendChild(itemLink);
            pagination.appendChild(item);
            
            item.addEventListener('click', () => {
               paginationSettings.page = i;
               fetchTerminalCommands()
            });
        }
    }
    
    function createRow(terminalCommand, index){
        const commandType = commands.find(x => x.id == terminalCommand.commandId);
            
        const indexElement = document.createElement('th');
        indexElement.textContent = index.toString();
            
        const createdAt = document.createElement('td');
        createdAt.textContent = terminalCommand.createdAt;
            
        const name = document.createElement('td');
        name.textContent = commandType.name;
            
        const firstValue = document.createElement('td');
        firstValue.textContent = terminalCommand.values[0];
            
        const secondValue = document.createElement('td');
        secondValue.textContent = terminalCommand.values[1];
            
        const thirdValue = document.createElement('td');
        thirdValue.textContent = terminalCommand.values[2];
            
        const state = document.createElement('td');
        state.textContent = terminalCommand.state;
            
        const row = document.createElement('tr');
        row.appendChild(indexElement);
        row.appendChild(createdAt);
        row.appendChild(name);
        row.appendChild(firstValue);
        row.appendChild(secondValue);
        row.appendChild(thirdValue);
        row.appendChild(state);
        
        return row;
    }
    
    async function submitForm() {
        if (terminalIdInput.value < 1 || commandSelectBox.value == defaultCommand.id)
            return;

        const payload = {
            terminalId: terminalIdInput.value, 
            commandTypeId: commandSelectBox.value,
            commandValues: getParameterValues()    
        }

        await fetch('/api/Terminal/command', {
            method: 'POST',
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(payload)
        });

        commandSelectBox.value = defaultCommand.id;
        commandSelectBox.dispatchEvent(new Event('change'));
        
        await fetchTerminalCommands();
    }
    
    function getParameterValues(){
        const parameterValues = [];
        for (let input of document.querySelectorAll('.parameter-input')){
            parameterValues.push(input.value);
        }
        return parameterValues;
    }
    
    function removeAllChildNodes(parent) {
        while (parent.firstChild) {
            parent.removeChild(parent.firstChild);
        }
    }
</script>