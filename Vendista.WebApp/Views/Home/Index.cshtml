@model IndexViewModel;

<div class="container">
    <div class=" mb-3 mt-3">
        Отправка команды на терминал
    </div>
    
    <div class="form">
        <div class="row">
            <div class="col-6">
                <label for="terminalId" class="form-label">ID Терминала(ов)</label>
                <textarea id="terminalId" class="form-control"></textarea>
            </div>
        
            <div class="col-6">
                <label for="command" class="form-label">Комманда</label>
                <select id="command" class="form-select"></select>
            </div>    
        </div>

        <div class="mt-3 parameters-container"></div>
        
        <div class="d-flex mt-5 justify-content-md-center">
            <button class="btn d-block btn-success">Отправить</button>
        </div>
    </div>
    
    <table class="table mt-5">
        <thead class="table-dark">
        <tr>
            <th>#</th>
            <th>Дата и время</th>
            <th>Комманда</th>
            <th>Параметр 1</th>
            <th>Параметр 2</th>
            <th>Параметр 3</th>
            <th>Статус</th>
        </tr>
        </thead>
        <tbody id="terminal-commands">
        </tbody>
    </table>
    
    <div class="d-flex justify-content-md-center">
        <ul class="pagination">
            <li class="page-item"><a class="page-link" href="#">Previous</a></li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item"><a class="page-link" href="#">Next</a></li>
        </ul>  
    </div>
    
</div>

<div id="commandTypes" class="d-none">
    @Json.Serialize(Model.CommandTypes)
</div>

<script>
    const commands = JSON.parse(document.getElementById('commandTypes').textContent);
    const commandSelectBox = document.getElementById('command');
    const terminalIdInput = document.getElementById('terminalId');
    const commandParameters = document.querySelector('.parameters-container');
    const terminalCommandsContainer = document.getElementById('terminal-commands');
    
    populateCommandSelectBox();
    updateParameters();
    
    commandSelectBox.addEventListener('change', updateParameters)
    terminalIdInput.addEventListener('change', fetchTerminalCommands)
        
    fetchTerminalCommands();

    function populateCommandSelectBox() {
        for (let command of commands) {
            let option = document.createElement('option');
            option.text = command.name;
            option.value = command.id;
            commandSelectBox.appendChild(option);
        }        
    }

    function updateParameters(){
        commandParameters.innerHTML = '';

        const command = commands.find(x => x.id == commandSelectBox.value);

        for (let parameter of command.parameters) {
            const container = document.createElement('div');
            container.classList = 'mb-3';
            
            const input = document.createElement('input');
            input.value = parameter.defaultValue;
            input.classList = 'form-control';
            
            const label = document.createElement('label');
            label.textContent = parameter.name;
            label.classList = 'form-label';
            
            container.appendChild(label);
            container.appendChild(input);
            
            commandParameters.appendChild(container);
        }
    }
    
    async function fetchTerminalCommands() {
        const response = await fetch(`api/terminal/${terminalIdInput.value}/commands`); 
        const pagedList = await response.json();
        
        terminalCommandsContainer.innerHTML = '';
        
        let index = 1;
        for (let command of pagedList.items) {
            const commandType = commands.find(x => x.id == command.commandId);
            
            const indexElement = document.createElement('th');
            indexElement.textContent = index.toString();
            index++;
            
            const createdAt = document.createElement('td');
            createdAt.textContent = command.createdAt;
            
            const name = document.createElement('td');
            name.textContent = commandType.name;
            
            const firstParameter = document.createElement('td');
            firstParameter.textContent = command.parameterValues[0];
            
            const secondParameter = document.createElement('td');
            secondParameter.textContent = command.parameterValues[1];
            
            const thirdParameter = document.createElement('td');
            thirdParameter.textContent = command.parameterValues[2];
            
            const state = document.createElement('td');
            state.textContent = command.state;
            
            const row = document.createElement('tr');
            row.appendChild(indexElement);
            row.appendChild(createdAt);
            row.appendChild(name);
            row.appendChild(firstParameter);
            row.appendChild(secondParameter);
            row.appendChild(thirdParameter);
            row.appendChild(state);
            
            terminalCommandsContainer.appendChild(row);
        }
    }
</script>